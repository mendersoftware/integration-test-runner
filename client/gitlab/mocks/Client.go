// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client_go "gitlab.com/gitlab-org/api/client-go"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CancelPipelineBuild provides a mock function with given fields: path, id
func (_m *Client) CancelPipelineBuild(path string, id int) error {
	ret := _m.Called(path, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(path, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePipeline provides a mock function with given fields: path, options
func (_m *Client) CreatePipeline(path string, options *client_go.CreatePipelineOptions) (*client_go.Pipeline, error) {
	ret := _m.Called(path, options)

	var r0 *client_go.Pipeline
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *client_go.CreatePipelineOptions) (*client_go.Pipeline, error)); ok {
		return rf(path, options)
	}
	if rf, ok := ret.Get(0).(func(string, *client_go.CreatePipelineOptions) *client_go.Pipeline); ok {
		r0 = rf(path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client_go.Pipeline)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *client_go.CreatePipelineOptions) error); ok {
		r1 = rf(path, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineVariables provides a mock function with given fields: path, id
func (_m *Client) GetPipelineVariables(path string, id int) ([]*client_go.PipelineVariable, error) {
	ret := _m.Called(path, id)

	var r0 []*client_go.PipelineVariable
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*client_go.PipelineVariable, error)); ok {
		return rf(path, id)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*client_go.PipelineVariable); ok {
		r0 = rf(path, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client_go.PipelineVariable)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectPipelines provides a mock function with given fields: path, options
func (_m *Client) ListProjectPipelines(path string, options *client_go.ListProjectPipelinesOptions) ([]*client_go.PipelineInfo, error) {
	ret := _m.Called(path, options)

	var r0 []*client_go.PipelineInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *client_go.ListProjectPipelinesOptions) ([]*client_go.PipelineInfo, error)); ok {
		return rf(path, options)
	}
	if rf, ok := ret.Get(0).(func(string, *client_go.ListProjectPipelinesOptions) []*client_go.PipelineInfo); ok {
		r0 = rf(path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client_go.PipelineInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *client_go.ListProjectPipelinesOptions) error); ok {
		r1 = rf(path, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
